import java.text.SimpleDateFormat

apply plugin: 'com.android.application'

def versionMajor = 0
def versionMinor = 0
def versionPatch = 3
// .alpha, .beta, .rc, .rtm, .ga, .rtw, or empty
def versionRelease = ""
def buildNumber = 3
def buildType = "release"

def buildTime() {
    // optional "yyyy-MM-dd'T'HH:mm'Z'"
    def df = new SimpleDateFormat("yyyyMMddHHmm")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

def versionFullName = "${versionMajor}.${versionMinor}.${versionPatch}${versionRelease}"
def buildName = "build${buildTime()}"

def ANDROIDX_LIBERY_VERSION = "1.1.0"

android {
    compileSdkVersion 29

    defaultConfig {
        applicationId "au.com.tyo.mmsviewer"
        minSdkVersion 16
        targetSdkVersion 29
        versionCode "${buildNumber}".toInteger()
        versionName "${versionFullName}"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    project.ext { appName = 'app' }
                    def newName = appName + "-" + buildType + "-v" + versionFullName + "-b" + buildNumber + ".apk"
                    outputFileName = newName
                }
            }

            /**
             * The dev build config
             */
            buildConfigField "String", "BUILD_ID", "\"" + versionFullName + "-b" + buildNumber + "\""
            // buildConfigField "boolean", "DEBUG", "false"
        }

        debug {
            /**
             * The  prod build config
             */
            buildType = "debug"

            buildConfigField "String", "BUILD_ID", "\"" + versionFullName + "-b" + buildNumber + " (Debug)\""
            //buildConfigField "boolean", "DEBUG", "true"
        }
    }
    lintOptions {
        checkReleaseBuilds false
        ignoreWarnings = true
        checkAllWarnings false
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    // we don't need that any more
    //useLibrary 'org.apache.http.legacy'

    configurations.all {
        resolutionStrategy {

        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
    //        exclude group: 'com.android.support', module: 'support-annotations'
    //    })
    api project(path: ':CommonAppLib')
    //    testCompile 'junit:junit:4.12'

    implementation "androidx.appcompat:appcompat:$ANDROIDX_LIBERY_VERSION"
    // For loading and tinting drawables on older versions of the platform
    implementation "androidx.appcompat:appcompat-resources:$ANDROIDX_LIBERY_VERSION"

    // jsoup HTML parser library @ https://jsoup.org/
    implementation 'org.jsoup:jsoup:1.12.2'
    implementation 'me.relex:circleindicator:1.2.2@aar'

    implementation "androidx.cardview:cardview:1.0.0"
}
